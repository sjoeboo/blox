#!/usr/bin/env ruby
require 'infoblox'
require 'pp'
require 'yaml'
require 'json'
require 'ipaddr'
require 'optparse'
require 'iblox'

options = Hash.new

OptionParser.new do |opts|
  opts.banner = "Usage iblox <Facility (dns|dhcp)> <action>(add|update|delete) [options]"
  opts.on("-c", "--config /path/to/infoblox.yaml",String, "use custom config path (defaults: ~/.iblox.yaml, /etc/iblox.yaml)") do |config |
    options.merge!(Hash[YAML::load(open(config)).map { |k, v| [k.to_sym, v] }])
    options[:config] = config
  end
  opts.on("-f", "--fqdn FQDN",String, "FQDN or add/update/remove") do |fqdn|
    options[:fqdn] = fqdn
  end
  opts.on("-h", "--new-fqdn FQDN",String, "New FQDN if updating a record") do |new_fqdn|
    options[:new_fqdn] = new_fqdn
  end
  opts.on("-n", "--network 192.168.0.0/24",String, "CIDR of network to use") do |network|
    options[:network] = network
  end
  opts.on("-i", "--ip 192.168.1.1",String,"IP address to use (if adding a record, this can be ommtted for next avialable, must specify network however)") do |ip|
    options[:ip] = ip
  end
  opts.on("-j", "--new-ip 192.168.1.2",String,"New ip address if updating a record") do |new_ip|
    options[:new_ip] = new_ip
  end
  opts.on("-m", "--mac 00:05:67:45:32:01",String,"Mac Address to use") do |mac|
    options[:mac] = mac
  end
  opts.on("-p", "--new-mac 00:05:67:45:32:02",String,"New Mac Address to use") do |new_mac|
    options[:new_mac] = new_mac
  end
  opts.on("-a", "--api 2.0",String,"WAPI Version") do |api|
    options[:wapi_version] = api
  end
  opts.on("-r", "--range","Use a DHCP range when finding addresses") do |range|
    options[:range] = range
  end

  opts.on("-v","--verbose", "Be verbose") do |v|
    options[:verbose] = v
  end

  opts.on("-b", "--batch /path/to/batch_file",String,"Turn on Batch mode") do |batch|
    options[:batch] = batch
  end

  opts.parse!
end


options[:facility] = ARGV[0]
if options[:facility] == nil
  raise "Must pass facility (dns/dhcp/both)"
end
if !options[:facility].match(/(dns|dhcp|both)/)
  raise "Facility must be one of 'dns', 'dhcp' or 'both'!"
end

options[:action] = ARGV[1]
if options[:action] == nil
  raise "Must pass an action!"
end

if !options[:action].match(/(add|update|delete)/)
  raise "Action must be one of 'add', 'update' or 'delete'"
end


#load config
if options[:config] == nil
  config=Iblox.config_find()
  options[:config] = config
  options.merge!(Hash[YAML::load(open(File.expand_path(config))).map { |k, v| [k.to_sym, v] }])
  if options[:verbose]
    pp options
  end
else
  options.merge!(Hash[YAML::load(open(File.expand_path(options[:config]))).map { |k, v| [k.to_sym, v] }])
  if options[:verbose]
    pp options
  end
end

#dns and dhcp have different requirements for options and functions.

case options[:facility]
when "dns"
  #are we doing batch mode?
  if options[:batch] != nil
    batch_data=Iblox.batch_dns_load(options[:batch])
  else
    if options[:ip] == nil or options[:fqdn] == nil
      raise "Both IP and FQDN are required for DNS actions"
    end
    #lets load batch_data with our one item so we can just "loop" that in either case
    batch_data=[]
    single_item={}
    single_item[:fqdn] = options[:fqdn]
    single_item[:ip] = options[:ip]
    batch_data.push(single_item)
  end
  #connect once
  connection=Iblox.connect(options[:username],options[:password],options[:host],options[:wapi_version])
  batch_data.each do |item|
    if Iblox.ipv4check(item[:ip])
      case options[:action]
      when "add"
        #Be smarter here, see if we exist, and if so don't #FAIL, just say so.
        if !Iblox.dns_exists(item[:fqdn],item[:ip],options[:verbose],connection)
          if options[:verbose] ==true
            puts "record doesn't exist, adding"
          end
          Iblox.dns_add(item[:fqdn],item[:ip],options[:verbose],connection)
        else
          if options[:verbose] ==true
            puts "record exists! not adding"
          end
        end
      when "update"
        #if we're in batch ode, bail out, cause...well i haven't written that yet.
        if options[:batch] != nil
          raise "Update in Batch mode not supported yet"
        else
          #check we got the new values.
          if ((options[:new_ip] != nil) or (options[:new_fqdn] != nil))
            Iblox.dns_update(item[:fqdn],item[:ip],options[:new_fqdn],options[:new_ip],options[:verbose],connection)
          else
            raise "No new IP or FQDN provided for update action"
          end
        end
      when "delete"
        Iblox.dns_delete(item[:fqdn],item[:ip],options[:verbose],connection)
      end
    end
  end

when "dhcp"
  #are we doing batch mode?
  if options[:batch] != nil
    batch_data=Iblox.batch_dhcp_load(options[:batch])
  else
    if (options[:ip] == nil and options[:network] == nil) or options[:fqdn] == nil or options[:mac] ==nil
      raise "IP or Network, and FQDN and MAC are required for DHCP actions"
    end
    #lets load batch_data with our one item so we can just "loop" that in either case
    batch_data=[]
    single_item={}
    single_item[:fqdn] = options[:fqdn]
    single_item[:ip] = options[:ip]
    single_item[:mac] = options[:mac]
    single_item[:network] = options[:network]
    batch_data.push(single_item)
  end
  #connect once
  connection=Iblox.connect(options[:username],options[:password],options[:host],options[:wapi_version])
  if options[:verbose] ==true
    puts "Connected to Infoblox"
  end
  batch_data.each do |item|
    case options[:action]
    when "add"
      #if we have an ip, check for existing reservation
      # if not check get next avail
      if (item[:ip] == nil and item[:network] != nil)
        #get net avail ip
        item[:ip]=Iblox.dhcp_next(item[:network],options[:verbose],connection,options[:range])
      end
      if Iblox.ipv4check(item[:ip])
        if !Iblox.dhcp_exists(item[:mac],options[:verbose],connection)
          if options[:verbose] ==true
            puts "record doesn't exist, adding"
          end
          Iblox.dhcp_add(item[:fqdn],item[:ip],item[:mac],options[:verbose],connection)
        else
          if options[:verbose] ==true
            puts "record exists! not adding"
          end
        end
      end
    when "update"
      if options[:batch] != nil
        raise "Update in Batch mode not supported yet"
      else
        if ((options[:new_ip] != nil) or (options[:new_fqdn] != nil) or (options[:new_mac] != nil ))
          Iblox.dhcp_update(options[:fqdn],options[:ip],options[:mac],options[:new_fqdn],options[:new_ip],options[:new_mac],options[:verbose],connection)
        else
          raise "No new IP, MAC, od FQDN provided for update action"
        end
      end
    when "delete"
      Iblox.dhcp_delete(item[:fqdn],item[:ip],item[:mac],options[:verbose],connection)
    end
  end
when "both"
  #do both operations
  #are we doing batch mode?
  if options[:batch] != nil
    #We can use the dhcp loader here since it loads all the info we need
    batch_data=Iblox.batch_dhcp_load(options[:batch])
  else
    if (options[:ip] == nil and options[:network] == nil) or options[:fqdn] == nil or options[:mac] ==nil
      raise "IP or Network, and FQDN and MAC are required for DHCP+DNS actions"
    end
    #lets load batch_data with our one item so we can just "loop" that in either case
    batch_data=[]
    single_item={}
    single_item[:fqdn] = options[:fqdn]
    single_item[:ip] = options[:ip]
    single_item[:mac] = options[:mac]
    single_item[:network] = options[:network]
    batch_data.push(single_item)
  end
  #connect once
  connection=Iblox.connect(options[:username],options[:password],options[:host],options[:wapi_version])
  if options[:verbose] ==true
    puts "Connected to Infoblox"
  end
  batch_data.each do |item|
    case options[:action]
    when "add"
      #if we have an ip, check for existing reservation
      # if not check get next avail
      if (item[:ip] == nil and item[:network] != nil)
        #get net avail ip
        item[:ip]=Iblox.dhcp_next(item[:network],options[:verbose],connection,options[:range])
      end
      if Iblox.ipv4check(item[:ip])
        if !Iblox.dhcp_exists(item[:mac],options[:verbose],connection)
          if options[:verbose] ==true
            puts "record doesn't exist, adding"
          end
          Iblox.dhcp_add(item[:fqdn],item[:ip],item[:mac],options[:verbose],connection)
          if !Iblox.dns_exists(item[:fqdn],item[:ip],options[:verbose],connection)
            if options[:verbose] ==true
              puts "record doesn't exist, adding"
            end
            Iblox.dns_add(item[:fqdn],item[:ip],options[:verbose],connection)
          else
            if options[:verbose] ==true
              puts "DNS record exists! not adding"
            end
          end
        else
          if options[:verbose] ==true
            puts "DHCP record exists! not adding"
          end
        end
      end
    when "update"
      raise "update not supported for BOTH mode right now"
    when "delete"
      Iblox.dhcp_delete(item[:fqdn],item[:ip],item[:mac],options[:verbose],connection)
      Iblox.dns_delete(item[:fqdn],item[:ip],options[:verbose],connection)
    end
  end
end
